!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t=require("tslib").__importDefault(require("react"));class o extends t.default.Component{constructor(t){super(t),this.state={delayMs:t.delayMs||0,src:t.src,timeout:null,render:t.render||null,id:t.id||null,renderScript:t.renderScript||!1,updated:!1},this.componentDidMount=this.componentDidMount.bind(this),this.componentWillUnmount=this.componentWillUnmount.bind(this),this._appendScript=this._appendScript.bind(this),this.render=this.render.bind(this),this.onCreate=this.onCreate.bind(this),this.onLoad=this.onLoad.bind(this),this.onError=this.onError.bind(this),this.onSuccess=this.onSuccess.bind(this)}componentDidMount(){this.log("componentDidMount started","color: #ff0000; font-weight: bold;",2),this.setState({timeout:setTimeout(this._appendScript,this.state.delayMs)}),this.log("componentDidMount exiting","color: #ff0000; font-weight: bold;",2)}log(t,o,e){if(this.props.debug){const s=e?" ".repeat(e):"";console.log(`%c ScriptLoader debug {src: "${this.state.src}"}`,o||"color: #00ff00; font-weight: bold;"),console.log(`%c ${s} ${t}`,o||"color: #00ff00; font-weight: bold;")}}componentDidUpdate(){this.log("componentDidUpdate started","color: #ff0000; font-weight: bold;",2),0==this.state.updated&&(this.setState({updated:!0}),this.onSuccess()),this.log("componentDidUpdate exiting","color: #ff0000; font-weight: bold;",2)}componentWillUnmount(){this.log("componentWillUnmount started","color: #ff0000; font-weight: bold;",2),this.state.timeout&&(this.log("Clearing Timeout...","color: #ff0000; font-weight: medium;",4),clearTimeout(this.state.timeout)),this.log("componentWillUnmount exiting","color: #ff0000; font-weight: bold;",2)}_appendScript=()=>{this.log("_appendScript started","color: #ff0000; font-weight: bold;",2);const{delayMs:t,src:o,id:e}=this.state,s=document.createElement("script");s.src=o,this.state.id&&(s.id=this.state.id);const i=Object.keys(this.state),n=Object.keys(this.props).filter((t=>!i.includes(t)));if(s.setAttribute("data-delayMs",t.toString()),0<n.length)for(const[t,o]of Object.entries(this.props))i.includes(t)||s.setAttribute(t,o);s.onload=this.onLoad,s.onerror=this.onError,document.body.appendChild(s),this.onCreate(),this.log("_appendScript exiting","color: #ff0000; font-weight: bold;",2)};onError(t){const{onError:o}=this.props;this.log(`onerror started... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2),o&&o(t),this.log(`onerror exiting... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2)}onSuccess(){const{onSuccess:t}=this.props;this.log(`onsuccess started... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2),t&&t(),this.log(`onsuccess exiting... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2)}onLoad(t){const o=this.props.onLoad;this.log(`onload started... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2),t&&this.log(`onload event: ${JSON.stringify(t,null,2)}`,"color: #ff0000; font-weight: bold;",4),o&&o(t),this.log(`onload exiting... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2)}onCreate(t){const{onLoad:o}=this.props;this.log(`oncreate started... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2),t&&this.log(`oncreate event: ${JSON.stringify(t,null,2)}`,"color: #ff0000; font-weight: bold;",4),o&&o(t),this.log(`oncreate exiting... for { src: "${this.state.src}" }`,"color: #ff0000; font-weight: bold;",2)}render(){const{updated:t,render:o}=this.state;return this.log(`render called, { src: ${this.state.src}}`,"color: #ff0000; font-weight: bold;",2),t&&o?o:null}}exports.default=o}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
